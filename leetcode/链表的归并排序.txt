给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。

进阶：

你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？

输入：head = [-1,5,3,4,0]
输出：[-1,0,3,4,5]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。






/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        return sort(head);
    }
    public ListNode sort(ListNode head){
        if(head == null){
            return head;
        }
        if(head.next == null){
            return head;
        }
        ListNode mid = head;
        ListNode tial = head.next;
        while(tial.next != null){
            mid = mid.next;
            tial = tial.next;
            if(tial.next != null){
                tial = tial.next;
            }
        }
        ListNode head2 = mid.next;
        mid.next = null;
        ListNode a = sort(head);
        ListNode b = sort(head2);
        return merge(a, b);
    }
    public ListNode merge(ListNode head, ListNode head2){
        ListNode sortlist = new ListNode(-1);
        ListNode newpoi = sortlist;
        while(head != null && head2 != null){
            if(head.val <= head2.val){
                ListNode temp = head.next;
                head.next = null;
                newpoi.next = head;
                head = temp;
            }else{
                ListNode temp = head2.next;
                head2.next = null;
                newpoi.next = head2;
                head2 = temp;
            }
            newpoi = newpoi.next;
        }
        if(head != null){
            newpoi.next = head;
        }
        if(head2 != null){
            newpoi.next = head2;
        }
        return sortlist.next;
    }
}