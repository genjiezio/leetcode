给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/permutations
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解法：https://blog.csdn.net/u013309870/article/details/68941284


class Solution {
    public List<List<Integer>> permute(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        while (true){
            List<Integer> list = new ArrayList<Integer>();
            for (int e: nums) {
                list.add(e);
            }
            lists.add(list);
            if(nums.length <= 1) break;
            int poi = 0;
            int index = 0;
            for(int i=nums.length-2;i>=0;i--){
                if(nums[i+1] > nums[i]){
                    index = i;
                    break;
                }else if(i == 0){
                    poi =1;
                    break;
                }
            }
            if(poi == 1) break;
            for(int i=nums.length-1;i>=index;i--){
                if(nums[i] > nums[index]){
                    swap(nums, i, index);
                    break;
                }
            }
            Reverse(nums ,index+1, nums.length-1);
        }
        return lists;
    }
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void Reverse(int[] nums, int i, int j){
        while (i<j){
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}

