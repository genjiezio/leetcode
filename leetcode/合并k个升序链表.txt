给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

 

示例 1：

输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1->4->5,
  1->3->4,
  2->6
]
将它们合并到一个有序链表中得到。
1->1->2->3->4->4->5->6
示例 2：

输入：lists = []
输出：[]
示例 3：

输入：lists = [[]]
输出：[]
 

提示：

k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] 按 升序 排列
lists[i].length 的总和不超过 10^4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-k-sorted-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解法：分治


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return merge(0, lists.length-1, lists);
    }
    public ListNode merge(int low, int high, ListNode[] lists){
        if(low == high){
            return lists[low];
        }
        if(low > high){
            return null;
        }
        int mid = (low+high)/2;
        return mergeTwolist(merge(low, mid, lists), merge(mid+1, high, lists));
    }
    public ListNode mergeTwolist(ListNode a, ListNode b){
            ListNode dummy = new ListNode(-1);
            ListNode poi = dummy;
            while(a != null && b != null){
                if(a.val <= b.val){
                    poi.next = a;
                    a = a.next;
                }else{
                    poi.next = b;
                    b = b.next;
                }
                poi = poi.next;
            }
            if(a != null){
                poi.next = a;
            }
            if(b != null){
                poi.next = b;
            }
            return dummy.next;
    }
}