在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例 1:

输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:

输入: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


假设【0】代表当前节点不偷，【1】代表偷。
则不偷的话，result[0] 实际上取决于两个子节点的最大值，即
result[0] = Math.max(leftmax[0], leftmax[1]) + Math.max(rightmax[0], rightmax[1]);
注意，当前节点不偷不代表子节点一定偷，子节点可能有一个偷一个不偷。
【1】表示偷则子节点不偷。
result[1] = root.val + leftmax[0] + rightmax[0];

由于是递归，所以思想不能是从上而下，是从下而上，所以一定是正确解不会出现冲突。


public int rob(TreeNode root) {
        int[] result = Maxrob(root);
        return Math.max(result[0], result[1]);
    }

    public int[] Maxrob(TreeNode root){
        if(root == null){
            return new int[2];
        }
        int[] result = new int[2];

        int[] leftmax = Maxrob(root.left);
        int[] rightmax = Maxrob(root.right);

        result[0] = Math.max(leftmax[0], leftmax[1]) + Math.max(rightmax[0], rightmax[1]);
        result[1] = root.val + leftmax[0] + rightmax[0];

        return result;
    }
