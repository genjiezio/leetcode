存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。

返回同样按升序排列的结果链表。

 

示例 1：


输入：head = [1,2,3,3,4,4,5]
输出：[1,2,5]
示例 2：


输入：head = [1,1,1,2,3]
输出：[2,3]
 

提示：

链表中节点数目在范围 [0, 300] 内
-100 <= Node.val <= 100
题目数据保证链表已经按升序排列

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解法： 迭代遍历， 栈



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null){
            return head;
        }
        Stack<ListNode> stack = new Stack<ListNode>();
        stack.push(head);
        head = head.next;
        while(head != null){
            if(head.val == stack.peek().val){
                while(head != null && head.val == stack.peek().val){
                    head = head.next;
                }
                stack.pop();
                if(head == null){
                    break;
                }
            }
            stack.push(head);
            head = head.next;
        }
        ListNode dummy = new ListNode(-1);
        while(!stack.isEmpty()){
            ListNode temp = stack.pop();
            temp.next = dummy.next;
            dummy.next = temp;
        }
        return dummy.next;
    }
}