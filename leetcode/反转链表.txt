反转一个单链表。

示例:

输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL
进阶:
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode poi1 = head;
        ListNode poi2 = head.next;
        head.next = null;
        while(poi2 != null){
            ListNode temp = poi2.next;
            poi2.next = poi1;
            poi1 = poi2;
            poi2 = temp;
        }
        return poi1;
    }
}



解法二：栈

ListNode reverse = new ListNode(-1);
        ListNode poi = head;
        Stack<ListNode> list = new Stack<ListNode>(); 
        while(poi != null){
            ListNode temp = poi;
            poi = poi.next;
            temp.next = null;
            list.push(temp);
        }
        poi = reverse;
        while(!list.isEmpty()){
            poi.next = list.pop();
            poi = poi.next;
        }
        return reverse.next;


解法三：递归

ListNode reverse(ListNode head) {
    if (head.next == null) return head;
    ListNode last = reverse(head.next);
    head.next.next = head;
    head.next = null;
    return last;
}