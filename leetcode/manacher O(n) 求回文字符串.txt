给你一个字符串 s，找到 s 中最长的回文子串。

 

示例 1：

输入：s = "babad"
输出："bab"
解释："aba" 同样是符合题意的答案。
示例 2：

输入：s = "cbbd"
输出："bb"
示例 3：

输入：s = "a"
输出："a"
示例 4：

输入：s = "ac"
输出："a"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-palindromic-substring
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


manacher算法： https://www.cnblogs.com/biyeymyhjob/archive/2012/10/04/2711527.html



class Solution {
    public String longestPalindrome(String s) {
        char[] array = s.toCharArray();
        char[] sorted = new char[2*array.length+1];
        sorted[0] = '#';
        int j = 0;
        for(int i=1;i<sorted.length;i=i+2){
            sorted[i] = array[j];
            j++;
            sorted[i+1] = '#';
        }
        int[] p = new int[2*array.length+1];
        int mx = 0; 
        int id = 0;
        for(int i=0;i<p.length;i++){
            if(mx>i){
               p[i] = Math.min(mx-i, p[2*id-i]);
            }else{
                p[i] = 1;
            }
            while(i-p[i]>=0 && i+p[i]<sorted.length && sorted[i-p[i]] == sorted[i+p[i]]){
                p[i]++;
            }
            if(i+p[i] > mx){
                mx = i+p[i];
                id = i;
            }
        }
        int max = 0;
        int pid = 0;
        for(int i=0;i<p.length;i++){
            if(p[i] > max){
                max = p[i];
                pid = i;
            }
        }
        max--;
        int start = pid-max;
        int end = pid+max;
        int k =0;
        for(int i=start;i<=end;i++){
            if(sorted[i] != '#'){
                k++;
            }
        }
        char[] str = new char[k];
        int l =0;
        for(int i=start;i<=end;i++){
            if(sorted[i] != '#'){
                str[l] = sorted[i];
                l++;
            }
        }
        String str2 = String.valueOf(str);
        return str2;
    }
}
