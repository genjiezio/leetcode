在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

 

示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



解法： 智力，左下或者右上开始找  m+n


class Solution {
    public boolean findNumberIn2DArray(int[][] matrix, int target) {
        if(matrix.length == 0 || matrix.length == 0) return false;
        int n = matrix.length, m = matrix[0].length;
        int col = 0, row = n-1;
        while(col < m && row >= 0){
            if(matrix[row][col] == target) return true;
            else if(matrix[row][col] < target) col++;
            else row--;
        }
        return false;
    }
}



解法： 二分？ log(m+n)?


class Solution {
    public boolean findNumberIn2DArray(int[][] matrix, int target) {
        if(matrix.length==0) return false;
        if(matrix[0].length==0) return false;
        int y1=0,y2=matrix.length-1;
        int x1=0,x2=matrix[0].length-1;

        //找矩形
        return find(matrix,x1,x2,y1,y2,target);


    }

    static private boolean find(int[][] matrix,int x1,int x2,int y1,int y2,int target){
        if(x1>x2||y1>y2) return false;

        int midx=(x1+x2)/2;
        int midy=(y1+y2)/2;
        if(matrix[midy][midx]>target){
            return find(matrix,x1,midx-1,y1,midy-1,target)
                ||find(matrix,midx,x2,y1,midy-1,target)
                ||find(matrix,x1,midx-1,midy,y2,target);
        }
        else if(matrix[midy][midx]<target){
            return find(matrix,midx+1,x2,midy+1,y2,target)
                ||find(matrix,midx+1,x2,y1,midy,target)
                ||find(matrix,x1,midx,midy+1,y2,target);

        }
        else if(matrix[midy][midx]==target){
            return true;
        }
        return false;
    }
}

???