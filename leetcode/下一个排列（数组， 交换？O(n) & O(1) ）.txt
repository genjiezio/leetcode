实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须 原地 修改，只允许使用额外常数空间。

 

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]
示例 4：

输入：nums = [1]
输出：[1]
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 100

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



解法：https://leetcode-cn.com/problems/next-permutation/solution/onshi-jian-o1kong-jian-jie-jin-shuang-10-uqx3/
我的文章hhh


class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length == 0 || nums.length == 1) return;

        //第一步
        int poi=-1;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i] < nums[i+1]) poi = i;
        }

        //poi仍为-1表示这是递减序列，最大的数，直接转为字典序最小的数
        if(poi == -1){
            swaps(nums, 0, nums.length-1);
            return;
        }

        //第二步
        for(int i=nums.length-1;i>poi;i--){
            if(nums[i] > nums[poi]){
                swap(nums, i, poi);
                break;
            }
        }

        //第三步
        swaps(nums, poi+1, nums.length-1);
    }

    //双方向交换方法排序
    public void swaps(int[] nums, int low, int high){
        while(low<high){
            swap(nums, low, high);
            low++; high--;
        }
    }

    //交换方法
    public void swap(int[] nums, int i, int j){
        int temp=nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

作者：cade-6
链接：https://leetcode-cn.com/problems/next-permutation/solution/onshi-jian-o1kong-jian-jie-jin-shuang-10-uqx3/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。